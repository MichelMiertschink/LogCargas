// <auto-generated />
using System;
using LogCargas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogCargas.Migrations
{
    [DbContext(typeof(LogCargasContext))]
    partial class LogCargasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LogCargas.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("LogCargas.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CorporateReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LogCargas.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("CelPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("LogCargas.Models.LoadScheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Bol")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("CheckList")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CityDestinyId")
                        .HasColumnType("int");

                    b.Property<int>("CityOriginId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<bool>("Cte")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncludeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Monitoring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PD")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Pay")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RiskManagement")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnloadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.Property<float>("VlContract")
                        .HasColumnType("float");

                    b.Property<float>("VlTranspor")
                        .HasColumnType("float");

                    b.Property<float>("Vladvance")
                        .HasColumnType("float");

                    b.Property<float>("Weigth")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityDestinyId");

                    b.HasIndex("CityOriginId");

                    b.HasIndex("CustomerId");

                    b.ToTable("LoadScheduling");
                });

            modelBuilder.Entity("LogCargas.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("LogCargas.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("DriverID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("LogCargas.Models.City", b =>
                {
                    b.HasOne("LogCargas.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("LogCargas.Models.LoadScheduling", b =>
                {
                    b.HasOne("LogCargas.Models.City", "CityDestiny")
                        .WithMany()
                        .HasForeignKey("CityDestinyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogCargas.Models.City", "CityOrigin")
                        .WithMany()
                        .HasForeignKey("CityOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogCargas.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityDestiny");

                    b.Navigation("CityOrigin");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LogCargas.Models.Vehicle", b =>
                {
                    b.HasOne("LogCargas.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("LogCargas.Models.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
